# -*- coding: utf-8 -*-
"""Copy of Copy of Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BzbkM7UTGuUvUk7m_iD7ZxsiGp4HrQE9
"""

#!/usr/bin/env python
# coding: utf-8

# # Program to get returns data

# In[ ]:


import pandas as pd
import numpy as np
import pandas_datareader as dr
from datetime import datetime
pd.options.display.float_format = '{:,.2f}'.format

#add symbols of firms here in next line. Check symbols on any website
companies=[]
#sheet=pd.read_excel('tickers.xlsx',header=4,usecols='A',names=['ticker'],nrows=50)
#for i in range(1,51):
#companies.append(sheet.ticker[i-1])
companies = ['goog','mo','t','AEM','aapl']#'t','aa','axp','DB','AEM','APD','fb', 'vedl','AMBA','NVS','ANF','LULU',] 
#print(companies,len(companies))
#companies.remove('ABX')
#companies.remove('AET')
#companies.remove('BMH.AX')
df = dr.data.get_data_yahoo(companies,start=datetime(2016,1,1),
                            end=datetime(2019,5,1),interval='m')
data = df[['Adj Close']].iloc[1:20]
log_data = np.log(data)



# ### Formatting and drop NaN values

# In[ ]:


df = log_data['Adj Close'].diff()
ndata = 100*df
ndata = ndata.dropna()


# ### This will save your data as a .csv file

# In[1]:


ndata.to_csv('out.csv')
#print(sheet)
print(ndata)
# In[ ]:

#k=ndata.describe()
#a=ndata.info()

mean_return = df.mean(axis=0)
std_dev = df.std(axis=0)
cov_matrix = np.matrix(df.cov())
corr_matrix = df.corr()

n = len(companies)

import random

n = len(companies)
expected_return = []
expected_std_dev = []
sp=[]
weights=[]
portfolios = []

for i in range(1, 10000):
  weight = np.random.random(n)
  weight = weight/np.sum(weight)

  portfolio_return = np.dot(weight, mean_return)
  portfolio_variance = np.matmul(np.matmul(weight, cov_matrix), np.transpose(weight))
  portfolio_std_dev = np.sqrt(portfolio_variance)
 
  sharpe_ratio = portfolio_return / portfolio_std_dev
  
  weights.append(weight)
  sp.append(sharpe_ratio)
  expected_return.append(portfolio_return)
  expected_std_dev.append(portfolio_std_dev)
  
expected_return = np.array(expected_return)
expected_std_dev = np.array(expected_std_dev)   
sp=np.array(sp)
weights=np.array(weights)
portfolios = pd.DataFrame(portfolios, columns=['Return', 'Std. Dev.'])

#print(expected_return)
#print(expected_std_dev)
#print(sp)

print(sp.max())
print(sp.argmax())

max_ret = expected_return[sp.argmax()]
max_risk = expected_std_dev[sp.argmax()]

import matplotlib.pyplot as plt
plt.figure(figsize=(12,8))
plt.scatter(expected_std_dev,expected_return,cmap='viridis')
plt.xlabel('Risk')
plt.ylabel('Return')
plt.scatter([max_risk],[max_ret], c='red') 
plt.show()



